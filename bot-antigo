const { Client, GatewayIntentBits, PermissionsBitField } = require(
    "discord.js",
);
require("dotenv").config(); // Linha adicionada

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
    ],
});

const PREFIX = "!";

client.on("ready", () => {
    console.log(`Bot est√° online como ${client.user.tag}!`);
});

client.on("messageCreate", async (message) => {
    if (!message.content.startsWith(PREFIX) || message.author.bot) return;

    const args = message.content.slice(PREFIX.length).trim().split(/ +/);
    const command = args.shift().toLowerCase();

    // Comando !ping
    if (command === "ping") {
        const pingMessage = await message.channel.send("Pong!");
        pingMessage.edit(
            `Pong! Lat√™ncia √© ${
                pingMessage.createdTimestamp - message.createdTimestamp
            }ms`,
        );
        return;
    }



if (command === "criarprojeto") {
    // Pergunta se usar√° uma categoria existente ou faz uma nova
    message.channel.send("Voc√™ deseja usar uma categoria j√° existente ou criar uma nova? (Responda `existente` ou `nova`)");
    const filter = (m) => m.author.id === message.author.id;
    const respostaCategoria = await message.channel.awaitMessages({
        filter,
        max: 1,
        time: 60000,
    });
    if (!respostaCategoria.size) {
        return message.channel.send("Tempo esgotado. Tente novamente.");
    }
    const escolhaCategoria = respostaCategoria.first().content.toLowerCase();

    let categoria;
    if (escolhaCategoria === "nova") {
        // Se for nova, pergunta qual nome deseja para a nova categoria
        message.channel.send("Qual o nome da nova categoria?");
        const respostaNovaCat = await message.channel.awaitMessages({
            filter,
            max: 1,
            time: 60000,
        });
        if (!respostaNovaCat.size) {
            return message.channel.send("Tempo esgotado. Tente novamente.");
        }
        const nomeCategoria = respostaNovaCat.first().content;

        try {
            categoria = await message.guild.channels.create({
                name: nomeCategoria,
                type: 4, // Categoria
                permissionOverwrites: [
                    {
                        id: message.guild.id,
                        deny: ["ViewChannel"],
                    },
                    // Outras configura√ß√µes de permiss√£o podem ser adicionadas aqui
                ],
            });
        } catch (err) {
            console.error(err);
            return message.channel.send("Erro ao criar a categoria.");
        }
    } else if (escolhaCategoria === "existente") {
        // Usa a categoria "PROJETOS"
        categoria = message.guild.channels.cache.find((c) => c.name === "PROJETOS" && c.type === 4);
        if (!categoria) {
            return message.channel.send("Categoria 'PROJETOS' n√£o encontrada.");
        }
    } else {
        return message.channel.send("Op√ß√£o inv√°lida. Tente novamente.");
    }

    // Pergunta o nome do f√≥rum a ser criado dentro da categoria escolhida
    message.channel.send("Qual o nome do f√≥rum a ser criado?");
    const respostaForum = await message.channel.awaitMessages({
        filter,
        max: 1,
        time: 60000,
    });
    if (!respostaForum.size) {
        return message.channel.send("Tempo esgotado. Tente novamente.");
    }
    const nomeForum = respostaForum.first().content;

    // Cria√ß√£o do f√≥rum com as tags dispon√≠veis
    const { ChannelType } = require("discord.js");
    let forumChannel;
    try {
        forumChannel = await message.guild.channels.create({
            name: nomeForum,
            type: ChannelType.GuildForum,
            parent: categoria.id,
            availableTags: [
                { name: "üé®Design" },
                { name: "üíªFront-End" },
                { name: "üñ•Ô∏èBack-End" },
                { name: "üê≥DevOps" },
            ],
        });
    } catch (err) {
        console.error(err);
        return message.channel.send("Erro ao criar o f√≥rum.");
    }

    // Cria√ß√£o dos t√≥picos (threads) dentro do f√≥rum, na ordem desejada.
    const topicos = ["Design", "Front-End", "Back-End", "DevOps"];
    try {
        for (const topico of topicos) {
            await forumChannel.threads.create({
                name: topico,
                autoArchiveDuration: 1440, // 24 horas, ajuste conforme necess√°rio
                reason: "Cria√ß√£o autom√°tica de t√≥pico para o projeto",
            });
        }
    } catch (err) {
        console.error(err);
        return message.channel.send("Erro ao criar os t√≥picos no f√≥rum.");
    }

    message.channel.send(`F√≥rum **${nomeForum}** criado com os t√≥picos: ${topicos.join(", ")}.`);
}
// Dentro do client.on("messageCreate", async (message) => { ... }
    // Comando !criarprojeto
//    if (command === "criarprojeto") {
//        message.channel.send("Qual o nome do projeto?");
//
//        const filter = (m) => m.author.id === message.author.id;
//        const projectNameCollector = await message.channel.awaitMessages({
//            filter,
//            max: 1,
//            time: 60000,
//        });
//        if (!projectNameCollector.size) {
//            return message.channel.send("Tempo esgotado. Tente novamente.");
//        }
//        const projectName = projectNameCollector.first().content;
//
//        message.channel.send("Mencione os usu√°rios para o projeto:");
//        const usersCollector = await message.channel.awaitMessages({
//            filter,
//            max: 1,
//            time: 60000,
//        });
//        if (!usersCollector.size) {
//            return message.channel.send("Tempo esgotado. Tente novamente.");
//        }
//        const mentionedUsers = usersCollector.first().mentions.members;
//
//        if (!mentionedUsers.size) {
//            return message.channel.send("Nenhum usu√°rio mencionado.");
//        }
//
//        const adminRole = message.guild.roles.cache.find((r) =>
//            r.permissions.has(PermissionsBitField.Flags.Administrator)
//        );
//
//        try {
//            const projectCategory = await message.guild.channels.create({
//                name: projectName,
//                type: 4,
//                permissionOverwrites: [
//                    {
//                        id: message.guild.id,
//                        deny: [PermissionsBitField.Flags.ViewChannel],
//                    },
//                    ...mentionedUsers.map((user) => ({
//                        id: user.id,
//                        allow: [
//                            PermissionsBitField.Flags.ViewChannel,
//                            PermissionsBitField.Flags.SendMessages,
//                            PermissionsBitField.Flags.Connect,
//                        ],
//                    })),
//                    ...(adminRole
//                        ? [{
//                            id: adminRole.id,
//                            allow: [PermissionsBitField.Flags.ViewChannel],
//                        }]
//                        : []),
//                ],
//            });
//
//            await message.guild.channels.create({
//                name: `${projectName}-texto`,
//                type: 0,
//                parent: projectCategory.id,
//                permissionOverwrites: projectCategory.permissionOverwrites.cache
//                    .map((p) => p),
//            });
//
//            await message.guild.channels.create({
//                name: `${projectName}-voz`,
//                type: 2,
//                parent: projectCategory.id,
//                permissionOverwrites: projectCategory.permissionOverwrites.cache
//                    .map((p) => p),
//            });
//
//            message.channel.send(`Projeto **${projectName}** criado!`);
//        } catch (err) {
//            console.error(err);
//            message.channel.send("Erro ao criar projeto.");
//        }
//    }

    // Comando !removercanal
    if (command === "removercanal") {
        if (
            !message.member.permissions.has(
                PermissionsBitField.Flags.Administrator,
            )
        ) {
            return message.channel.send("Voc√™ precisa ser administrador!");
        }

        const channelName = args.join(" ");
        if (!channelName) {
            return message.channel.send("Digite o nome do canal.");
        }

        const channel = message.guild.channels.cache.find((c) =>
            c.name === channelName
        );
        if (!channel) return message.channel.send("Canal n√£o encontrado.");

        try {
            await channel.delete();
            message.channel.send(`Canal **${channelName}** removido.`);
        } catch (err) {
            console.error(err);
            message.channel.send("Erro ao remover canal.");
        }
    }
});

// √öltima linha do arquivo:
client.login(process.env.DISCORD_TOKEN);

